name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.11"

jobs:
  # Code quality and linting
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Run Ruff (linting)
        run: uv run ruff check server/ tests/

      - name: Run MyPy (type checking)
        run: uv run mypy server/

  # Unit and integration tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --dev

      - name: Run unit tests with coverage
        run: uv run pytest tests/ -v --cov=server --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: matrix.python-version == env.PYTHON_VERSION
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Security scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          uv tool install safety
          uv tool install bandit[toml]

      - name: Run Safety (dependency vulnerability check)
        run: uv tool run safety check

      - name: Run Bandit (security linter)
        run: uv tool run bandit -r server/ -f json -o bandit-report.json || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-report
          path: bandit-report.json

  # Docker build and test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: false
          load: true
          tags: fastapi-test-server:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          # Start container in background
          docker run -d --name test-server -p 8000:8000 \
            -e SERVER_LOG_LEVEL=DEBUG \
            -e SERVER_MAX_CONCURRENCY=5 \
            fastapi-test-server:test

          # Wait for health check
          sleep 10

          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1

          # Test basic functionality
          response=$(curl -s http://localhost:8000/msg)
          echo "Response: $response"

          # Verify response contains message_id
          echo "$response" | grep -q "message_id" || exit 1

          # Test failure injection
          curl -X POST http://localhost:8000/fail/count/1

          # This should fail
          status_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/msg)
          if [ "$status_code" != "500" ]; then
            echo "Expected 500, got $status_code"
            exit 1
          fi

          # This should succeed
          status_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/msg)
          if [ "$status_code" != "200" ]; then
            echo "Expected 200, got $status_code"
            exit 1
          fi

          # Clean up
          docker stop test-server
          docker rm test-server

  # Build and push Docker images on release
  docker-release:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test, docker]
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: fastapi-test-server
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Performance testing
  performance:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Set up Python
        run: uv python install ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: uv tool install httpx

      - name: Build and start test server
        run: |
          docker build -f docker/Dockerfile -t test-server .
          docker run -d --name perf-test-server -p 8000:8000 \
            -e SERVER_MAX_CONCURRENCY=20 \
            -e SERVER_LOG_LEVEL=WARNING \
            test-server

      - name: Wait for server startup
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:8000/health > /dev/null 2>&1; then
              echo "Server is ready"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 2
          done

      - name: Run performance tests
        run: |
          uv run python - << 'EOF'
          import asyncio
          import httpx
          import time
          import statistics

          async def performance_test():
              async with httpx.AsyncClient() as client:
                  # Test 1: Basic throughput
                  print("Testing basic throughput...")
                  start = time.time()
                  tasks = [client.get("http://localhost:8000/msg") for _ in range(50)]
                  responses = await asyncio.gather(*tasks)
                  duration = time.time() - start

                  success_count = sum(1 for r in responses if r.status_code == 200)
                  print(f"Basic throughput: {success_count}/{len(responses)} requests in {duration:.2f}s")
                  print(f"Rate: {success_count/duration:.1f} req/s")

                  # Test 2: Idempotency performance
                  print("\nTesting idempotency performance...")
                  start = time.time()
                  headers = {"X-Request-ID": "perf-test-123"}
                  tasks = [client.get("http://localhost:8000/msg", headers=headers) for _ in range(20)]
                  responses = await asyncio.gather(*tasks)
                  duration = time.time() - start

                  # All should return the same message_id
                  message_ids = [r.json()["message_id"] for r in responses]
                  unique_ids = set(message_ids)
                  print(f"Idempotency: {len(unique_ids)} unique IDs from {len(responses)} requests")
                  print(f"Cache hit rate: {(len(responses)-len(unique_ids))/len(responses)*100:.1f}%")

                  # Test 3: Delay handling
                  print("\nTesting delay handling...")
                  delays = [50, 100, 200]  # ms
                  for delay in delays:
                      start = time.time()
                      response = await client.get(f"http://localhost:8000/msg?delay={delay}")
                      duration = (time.time() - start) * 1000  # Convert to ms
                      print(f"Delay {delay}ms: actual {duration:.0f}ms")
                      assert response.status_code == 200

          asyncio.run(performance_test())
          EOF

      - name: Cleanup
        if: always()
        run: |
          docker stop perf-test-server || true
          docker rm perf-test-server || true
